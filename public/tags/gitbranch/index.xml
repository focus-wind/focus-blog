<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>GitBranch on 北溪入江流</title>
        <link>/tags/gitbranch/</link>
        <description>Recent content in GitBranch on 北溪入江流</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gitbranch/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git分支管理</title>
        <link>/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</link>
        <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;git分支管理&#34;&gt;Git分支管理&lt;/h1&gt;
&lt;p&gt;Git常用分支包括： &lt;strong&gt;master&lt;/strong&gt;，&lt;strong&gt;hotfix&lt;/strong&gt;，&lt;strong&gt;bugfix&lt;/strong&gt;，&lt;strong&gt;release&lt;/strong&gt;，&lt;strong&gt;develop&lt;/strong&gt;，&lt;strong&gt;feature&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch.png&#34;
	width=&#34;1988&#34;
	height=&#34;1236&#34;
	srcset=&#34;/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch_hua82e18d67f008e7d173910039aa56555_172643_480x0_resize_box_3.png 480w, /post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch_hua82e18d67f008e7d173910039aa56555_172643_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git分支图.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;386px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;：项目主分支，有且仅有一个，除项目负责人外其他开发人员不得向 master 分支合并内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hotfix&lt;/strong&gt;：紧急线上 bug 修复分支，紧急即需要立刻尽快去处理发布上线（自 master 拉取）, 直接进行测试及上线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bugfix&lt;/strong&gt;：非紧急上线的 bug 修复分支, 如非当天上线即使用 bugfix 进行命名（自 master 拉取） , 直接进行测试及上线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;：作为提测及上线分支，release是发布正式版本之前（即合并到 master 分支之前），需要有一个预发布的版本进行测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;：主开发分支，存有确定性的所有功能（上线和未上线）, 作为开发环境共有的部署分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;：功能开发分支，feature 是为了开发后续版本的功能，从 develop 分支拉取出来的。开发完成稳定后，要再并入 develop 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分支命名&#34;&gt;分支命名&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hotfix&lt;/strong&gt;：hotfix/{功能}，如 hotfix/providerLose。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bugfix&lt;/strong&gt;：bugfix/{功能}_年月日，如 bugfix/pubMsg_20210701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;：release/{功能}_年月日，如 release/pubMsg_20210701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;：feature/{功能}_年月日，如 feature/pubMsg_20210701。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分支管理&#34;&gt;分支管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;上线完成之后, 提交申请进行master的合并处理, 打 Tag 维护（审核人员 / Leader）&lt;/li&gt;
&lt;li&gt;相关分支创建人, 删除对应上线功能 feature / release / bugfix 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git代码提交规约推荐&#34;&gt;Git代码提交规约（推荐）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;设置用户名为本人姓名，邮箱为公司邮箱或本人邮箱。&lt;/li&gt;
&lt;li&gt;代码提交规则：
&lt;ol&gt;
&lt;li&gt;提交的说明包含两部分：动作类型:简要说明，以英文的“:”作为区分。&lt;/li&gt;
&lt;li&gt;动作类型使用英文大写。&lt;/li&gt;
&lt;li&gt;理论上一次提交仅包含一个功能修改，如功能过大，需要注明功能的完成进度。若一次提交有多个功能修改，则每个功能提交描述作为单独的一行，每行以英文标识符“,”作为行尾结束符。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;新加功能，文件&lt;/td&gt;
&lt;td&gt;ADD:增加文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DEL&lt;/td&gt;
&lt;td&gt;删除功能，文件&lt;/td&gt;
&lt;td&gt;DEL:删除文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOD&lt;/td&gt;
&lt;td&gt;修改功能&lt;/td&gt;
&lt;td&gt;MOD:修改功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIX&lt;/td&gt;
&lt;td&gt;修复问题&lt;/td&gt;
&lt;td&gt;FIX:修复问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PREF&lt;/td&gt;
&lt;td&gt;优化功能，提升性能，体验&lt;/td&gt;
&lt;td&gt;PREF:优化功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STYLE&lt;/td&gt;
&lt;td&gt;修改代码格式（不影响代码运行的变动）&lt;/td&gt;
&lt;td&gt;STYLE:修改代码格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFACTOR&lt;/td&gt;
&lt;td&gt;重构（既不增加新功能，也不修改bug的代码变动，一般重构需要使用新的独立分支处理）&lt;/td&gt;
&lt;td&gt;REFACTOR:重构代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOCS&lt;/td&gt;
&lt;td&gt;文档&lt;/td&gt;
&lt;td&gt;DOCS:文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;代码提交流程&#34;&gt;代码提交流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;代码修改完成后，需先进行编码规范检查，注释检查，单元测试等操作。&lt;/li&gt;
&lt;li&gt;测试通过后提交到本地，检查提交文件是否正确，有无遗漏文件，添加相关说明。&lt;/li&gt;
&lt;li&gt;拉取服务器的代码，检查代码合并结果，若有冲突则找相关人员解决冲突。解决冲突后，重新编译测试代码，测试成功后提交本地代码。&lt;/li&gt;
&lt;li&gt;推送代码到服务器。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
