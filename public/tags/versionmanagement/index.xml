<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>VersionManagement on 北溪入江流</title>
        <link>/tags/versionmanagement/</link>
        <description>Recent content in VersionManagement on 北溪入江流</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Wed, 01 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/versionmanagement/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git文件.gitignore和.gitkeep用法解析</title>
        <link>/post/version_management_git/git%E6%96%87%E4%BB%B6.gitignore%E5%92%8C.gitkeep%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>/post/version_management_git/git%E6%96%87%E4%BB%B6.gitignore%E5%92%8C.gitkeep%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;：告诉 &lt;code&gt;git&lt;/code&gt; 管理工具，需要忽略那些不需要被跟踪的文件或目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitkeep&lt;/code&gt;：无意义，起到占位符的作用，&lt;code&gt;git&lt;/code&gt; 在进行版本管理时，不会主动跟踪空目录，所以当项目中存在空目录的时候，&lt;code&gt;git&lt;/code&gt; 会忽略空目录，如果需要将空目录上传到git仓库，一般需要在空目录下创建一个 &lt;code&gt;.gitkeep&lt;/code&gt; 空文件起到占位的作用。在创建占位文件时，无意义的文件都是可以的，&lt;code&gt;.gitkeep&lt;/code&gt; 文件只是一种约定俗成的规范名称而已。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gitignore&#34;&gt;.gitignore&lt;/h1&gt;
&lt;h2 id=&#34;gitignore工作原理&#34;&gt;.gitignore工作原理&lt;/h2&gt;
&lt;p&gt;在有的项目中，并不是所有的文件都需要上传到Git仓库进行版本管理的，这时我们就需要在项目中添加一个 &lt;code&gt;.gitignore&lt;/code&gt; 文件告诉 &lt;code&gt;git&lt;/code&gt; 那些文件或目录不需要被跟踪。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件一般放在项目的根目录下对整个项目的文件进行匹配。也可以放到其他目录下，此时 &lt;code&gt;.gitignore&lt;/code&gt; 文件以当前所在的路径为根路径进行模式匹配。&lt;/p&gt;
&lt;p&gt;在创建 &lt;code&gt;.gitignore&lt;/code&gt; 文件之前，假如已经把一些需要忽略文件添加到 &lt;code&gt;git&lt;/code&gt; 版本管理中，那么即使我们在 &lt;code&gt;.gitignore&lt;/code&gt; 文件中添加了这些文件的匹配规则，此时 &lt;code&gt;git&lt;/code&gt; 不会匹配这些规则，对添加的文件进行过滤，因为此时这些文件已经被 &lt;code&gt;git&lt;/code&gt; 进行管理了。所以在项目创建开始时就需要养成创建 &lt;code&gt;.gitignore&lt;/code&gt; 的习惯。&lt;/p&gt;
&lt;h2 id=&#34;gitignore常用匹配规则&#34;&gt;.gitignore常用匹配规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;：注释&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;：转义符，使具有特殊意义的字符标识为普通字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt;：否定前缀，表示不忽略（跟踪）指定路径，可以将之前排除过滤的匹配文件再次包含进来。&lt;code&gt;git&lt;/code&gt; 默认是对空目录不进行跟踪，可以使用 &lt;code&gt;!&lt;/code&gt; 前缀用来管理跟踪空目录，不过跟推荐使用 &lt;code&gt;.gitkeep&lt;/code&gt; 占位文件来跟踪管理空目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：目录分隔符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;位于开头或中间：匹配相对于 &lt;code&gt;.gitignore&lt;/code&gt;的相对路径
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/folder1/file1&lt;/code&gt;：匹配相对于 &lt;code&gt;.gitignore&lt;/code&gt; 所在路径根目录下单的 &lt;code&gt;/folder1/file1&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subfolder1/file1&lt;/code&gt;：匹配相对于 &lt;code&gt;.gitignore&lt;/code&gt; 所在路径的 &lt;code&gt;subfolder1/file1&lt;/code&gt; 文件，无论是根目录还是某个子目录下的 &lt;code&gt;subfolder1/file1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;位于结尾：只匹配目录，否则同时匹配目录和文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：通配多个字符，只能匹配到指定路径下的目录或文件，不能匹配子目录的内容。
&lt;ul&gt;
&lt;li&gt;如 &lt;code&gt;/folder1/*&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;仅能匹配到 &lt;code&gt;/folder1/file1&lt;/code&gt;&amp;hellip;，&lt;code&gt;/folder1/subfolder1/&lt;/code&gt;&amp;hellip;等文件&lt;/li&gt;
&lt;li&gt;不能匹配到 &lt;code&gt;/folder1/subfolder1/file1&lt;/code&gt;&amp;hellip;等文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;：特殊匹配符，表示匹配所有目录：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**/subfolder1&lt;/code&gt;：匹配任意路径下的文件或目录 &lt;code&gt;subfolder1&lt;/code&gt;，类似于 &lt;code&gt;subfolder1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;folder1/**/file1&lt;/code&gt;：匹配 &lt;code&gt;folder1/file1&lt;/code&gt;, &lt;code&gt;folder1/subfolder1/file1&lt;/code&gt;, &lt;code&gt;folder1/subfolder1/subsubfolder1/file1&lt;/code&gt;等文件或目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/flolder1/**&lt;/code&gt;：匹配 &lt;code&gt;/flolder1&lt;/code&gt; 路径下所有文件和目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;：通配单个字符匹配除了&lt;code&gt;/&lt;/code&gt;之外的任意单个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;：范围匹配，匹配&lt;code&gt;[]&lt;/code&gt; 指定范围内的任意单个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本地-gitignore-规则&#34;&gt;本地 .gitignore 规则&lt;/h2&gt;
&lt;p&gt;远程代码仓库的 &lt;code&gt;.gitignore&lt;/code&gt; 文件一般匹配项目中需要过滤的文件。但在实际开发中，项目组的各个成员有可能使用的IDE、编译器，开发环境等的不同，可能会导致每一个人都可能在自己本地需要一套额外的匹配过滤规则，但这套匹配过滤规则是与自己本地绑定的，而不应该上传到远程仓库。&lt;/p&gt;
&lt;h3 id=&#34;本地代码库-gitignore-规则&#34;&gt;本地代码库 .gitignore 规则&lt;/h3&gt;
&lt;p&gt;可以将自己本地的，不需要上传到仓库的 &lt;code&gt;.gitignore&lt;/code&gt; 匹配规则写入在 &lt;code&gt;.git/info/exclude&lt;/code&gt; 文件中&lt;/p&gt;
&lt;h3 id=&#34;全局-gitignore-规则&#34;&gt;全局 .gitignore 规则&lt;/h3&gt;
&lt;p&gt;全局 &lt;code&gt;.gitignore&lt;/code&gt; 对本地的所有项目都生效&lt;/p&gt;
&lt;h4 id=&#34;创建全局-gitignore-文件来进行全局-gitignore-匹配&#34;&gt;创建全局 .gitignore 文件来进行全局 .gitignore 匹配&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global core.excludesfile &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;file_path&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一般情况下，推荐将全局 &lt;code&gt;.gitignore&lt;/code&gt; 文件放在用户 &lt;code&gt;~&lt;/code&gt; 目录下，也命名为 &lt;code&gt;.gitignore&lt;/code&gt; 文件名，具体可根据实际需要进行修改。
添加全局匹配规则时，到指定文件添加匹配规则即可。&lt;/p&gt;
&lt;h4 id=&#34;修改-gitconfig-来进行全局-gitignore-匹配&#34;&gt;修改 .gitconfig 来进行全局 .gitignore 匹配&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt; 文件一般在用户 &lt;code&gt;~&lt;/code&gt; 目录下，若无此文件，创建空文件即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt;中写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;core&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;excludesfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;file_path&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过修改配置文件配置全局 .gitignore 规则，不会自动创建指定文件，需要在指定路径下创建对应的文件。&lt;/p&gt;
&lt;h2 id=&#34;那些文件需要被过滤&#34;&gt;那些文件需要被过滤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;日志文件&lt;/li&gt;
&lt;li&gt;缓存或临时文件&lt;/li&gt;
&lt;li&gt;具有敏感信息的文件，如密码，密钥，身份信息等&lt;/li&gt;
&lt;li&gt;编译文件，如 &lt;code&gt;.class&lt;/code&gt;， &lt;code&gt;.o&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;依赖目录，如 &lt;code&gt;/venv&lt;/code&gt;, &lt;code&gt;/node_modules&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;编译输出文件，如 &lt;code&gt;/dist&lt;/code&gt;, &lt;code&gt;/public&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;系统文件，如 &lt;code&gt;.DS_Store&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;项目目录下的压缩打包文件，如 &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar.gz&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;IDE或文本编译器的配置文件，如 &lt;code&gt;.idea/&lt;/code&gt;, &lt;code&gt;__pycache__&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;大量数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有的人在使用 &lt;code&gt;git&lt;/code&gt; 时，会将项目打包文件或项目依赖的数据集等大文件放在 &lt;code&gt;git&lt;/code&gt; 中来进行版本管理，这样做是不对的，在使用 &lt;code&gt;git&lt;/code&gt; 时，应满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;禁止push提交大文件&lt;/li&gt;
&lt;li&gt;少量多次commit&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gitkeep&#34;&gt;.gitkeep&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 版本管理一般不会跟踪空目录，所以在上传到远程仓库时，会发现所有的空目录都不存在。但有的空目录是保持目录结构和进行未来扩展的必要目录，所以也需要将这些空目录上传到远程仓库中。&lt;/p&gt;
&lt;p&gt;根据 &lt;code&gt;.gitignore&lt;/code&gt; 中的匹配规则可知，我们可以使用 &lt;code&gt;!&lt;/code&gt; 来指定相应的目录进行跟踪来上传远程目录，但在 &lt;code&gt;.gitignore&lt;/code&gt; 中来指定空目录跟踪，既不方便也有可能造成歧义。所以不推荐使用本方法。&lt;/p&gt;
&lt;p&gt;我们可以在空目录下创建空白的占位文件，这样该目录就不再是空目录的，&lt;code&gt;git&lt;/code&gt; 也会进行相应的跟踪管理。理论上，无意义的占位文件都是可以的，开发人员一般使用 &lt;code&gt;.gitkeep&lt;/code&gt; 作为空目录的占位文件，仅仅是一种约定俗成的规范。在实际项目中，可以根据项目组的要求使用指定的占位文件，若无要求，推荐使用 &lt;code&gt;.gitkeep&lt;/code&gt; 保持良好的规范。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git配置SSH公钥</title>
        <link>/post/version_management_git/git%E9%85%8D%E7%BD%AEssh%E5%85%AC%E9%92%A5/</link>
        <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>/post/version_management_git/git%E9%85%8D%E7%BD%AEssh%E5%85%AC%E9%92%A5/</guid>
        <description>&lt;h1 id=&#34;生成添加ssh公匙&#34;&gt;生成添加ssh公匙&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在GitBash界面按照如下命令生成公匙&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -t rsa -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxx@xxxxx.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;： Type，指定要创建密钥的类型
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rsa&lt;/code&gt;：通过rsa加密算法生成的密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dsa&lt;/code&gt;：通过dsa加密算法生成的密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ecdsa&lt;/code&gt;：通过带椭圆曲线的dsa加密算法生成的密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt;：Commit，更改密钥文件的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这里的 &lt;a class=&#34;link&#34; href=&#34;mailto:xxxxx@xxxxx.com&#34; &gt;xxxxx@xxxxx.com&lt;/a&gt; 只是生成的 sshkey 的注释名称，并不约束或要求具体命名为某个邮箱。&lt;/li&gt;
&lt;li&gt;现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。&lt;/li&gt;
&lt;li&gt;根据项目组规范要求，使用个人邮箱命名sshkey的名称。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;按照提示完成三次回车，即可生成 ssh key。&lt;/li&gt;
&lt;li&gt;通过查看 ~/.ssh/id_rsa.pub文件内容，获取到你的 public key。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;~/：当前用户文件夹&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux：/home/{userName}&lt;/li&gt;
&lt;li&gt;Windows：C:\Users{userName}&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;复制id_rsa.pub文件中中生成的sshkey&lt;/li&gt;
&lt;li&gt;在Git仓库的[ssh公匙]页面添加sshkey&lt;/li&gt;
&lt;li&gt;将复制的sshkey添加到公匙输入框中，设置标题，确定即可添加公匙&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;验证ssh公匙&#34;&gt;验证ssh公匙&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;打开 shell 界面&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;ssh -T git@gitee.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;首次使用需要确认并添加主机到本机SSH可信列表。若返回 Hi XXX! You&amp;rsquo;ve successfully authenticated, but Gitee.com does not provide shell access. 内容，则证明添加成功。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Git分支管理</title>
        <link>/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</link>
        <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;git分支管理&#34;&gt;Git分支管理&lt;/h1&gt;
&lt;p&gt;Git常用分支包括： &lt;strong&gt;master&lt;/strong&gt;，&lt;strong&gt;hotfix&lt;/strong&gt;，&lt;strong&gt;bugfix&lt;/strong&gt;，&lt;strong&gt;release&lt;/strong&gt;，&lt;strong&gt;develop&lt;/strong&gt;，&lt;strong&gt;feature&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch.png&#34;
	width=&#34;1988&#34;
	height=&#34;1236&#34;
	srcset=&#34;/post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch_hua82e18d67f008e7d173910039aa56555_172643_480x0_resize_box_3.png 480w, /post/version_management_git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/git_branch_hua82e18d67f008e7d173910039aa56555_172643_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Git分支图.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;386px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;：项目主分支，有且仅有一个，除项目负责人外其他开发人员不得向 master 分支合并内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hotfix&lt;/strong&gt;：紧急线上 bug 修复分支，紧急即需要立刻尽快去处理发布上线（自 master 拉取）, 直接进行测试及上线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bugfix&lt;/strong&gt;：非紧急上线的 bug 修复分支, 如非当天上线即使用 bugfix 进行命名（自 master 拉取） , 直接进行测试及上线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;：作为提测及上线分支，release是发布正式版本之前（即合并到 master 分支之前），需要有一个预发布的版本进行测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;：主开发分支，存有确定性的所有功能（上线和未上线）, 作为开发环境共有的部署分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;：功能开发分支，feature 是为了开发后续版本的功能，从 develop 分支拉取出来的。开发完成稳定后，要再并入 develop 分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分支命名&#34;&gt;分支命名&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hotfix&lt;/strong&gt;：hotfix/{功能}，如 hotfix/providerLose。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bugfix&lt;/strong&gt;：bugfix/{功能}_年月日，如 bugfix/pubMsg_20210701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;：release/{功能}_年月日，如 release/pubMsg_20210701。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feature&lt;/strong&gt;：feature/{功能}_年月日，如 feature/pubMsg_20210701。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;分支管理&#34;&gt;分支管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;上线完成之后, 提交申请进行master的合并处理, 打 Tag 维护（审核人员 / Leader）&lt;/li&gt;
&lt;li&gt;相关分支创建人, 删除对应上线功能 feature / release / bugfix 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;git代码提交规约推荐&#34;&gt;Git代码提交规约（推荐）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;设置用户名为本人姓名，邮箱为公司邮箱或本人邮箱。&lt;/li&gt;
&lt;li&gt;代码提交规则：
&lt;ol&gt;
&lt;li&gt;提交的说明包含两部分：动作类型:简要说明，以英文的“:”作为区分。&lt;/li&gt;
&lt;li&gt;动作类型使用英文大写。&lt;/li&gt;
&lt;li&gt;理论上一次提交仅包含一个功能修改，如功能过大，需要注明功能的完成进度。若一次提交有多个功能修改，则每个功能提交描述作为单独的一行，每行以英文标识符“,”作为行尾结束符。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;新加功能，文件&lt;/td&gt;
&lt;td&gt;ADD:增加文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DEL&lt;/td&gt;
&lt;td&gt;删除功能，文件&lt;/td&gt;
&lt;td&gt;DEL:删除文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MOD&lt;/td&gt;
&lt;td&gt;修改功能&lt;/td&gt;
&lt;td&gt;MOD:修改功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIX&lt;/td&gt;
&lt;td&gt;修复问题&lt;/td&gt;
&lt;td&gt;FIX:修复问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PREF&lt;/td&gt;
&lt;td&gt;优化功能，提升性能，体验&lt;/td&gt;
&lt;td&gt;PREF:优化功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STYLE&lt;/td&gt;
&lt;td&gt;修改代码格式（不影响代码运行的变动）&lt;/td&gt;
&lt;td&gt;STYLE:修改代码格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REFACTOR&lt;/td&gt;
&lt;td&gt;重构（既不增加新功能，也不修改bug的代码变动，一般重构需要使用新的独立分支处理）&lt;/td&gt;
&lt;td&gt;REFACTOR:重构代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOCS&lt;/td&gt;
&lt;td&gt;文档&lt;/td&gt;
&lt;td&gt;DOCS:文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;代码提交流程&#34;&gt;代码提交流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;代码修改完成后，需先进行编码规范检查，注释检查，单元测试等操作。&lt;/li&gt;
&lt;li&gt;测试通过后提交到本地，检查提交文件是否正确，有无遗漏文件，添加相关说明。&lt;/li&gt;
&lt;li&gt;拉取服务器的代码，检查代码合并结果，若有冲突则找相关人员解决冲突。解决冲突后，重新编译测试代码，测试成功后提交本地代码。&lt;/li&gt;
&lt;li&gt;推送代码到服务器。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Git初始化配置</title>
        <link>/post/version_management_git/git%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>/post/version_management_git/git%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;h1 id=&#34;git配置&#34;&gt;Git配置&lt;/h1&gt;
&lt;p&gt;Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。
这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量具体配置在以下三个不同的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git/etc/gitconfig&lt;/code&gt; 文件：系统中对所有用户都普遍适用的配置。若使用 &lt;code&gt;git config&lt;/code&gt; 时用 &lt;code&gt;--system&lt;/code&gt; 选项，读写的就是这个文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt; 文件：用户目录下的配置文件只适用于该用户。若使用 &lt;code&gt;git config&lt;/code&gt; 时用 &lt;code&gt;--global&lt;/code&gt; 选项，读写的就是这个文件。&lt;/li&gt;
&lt;li&gt;当前项目的 Git 目录中的配置文件（也就是工作目录中的 &lt;code&gt;.git/config&lt;/code&gt; 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 &lt;code&gt;.git/config&lt;/code&gt; 里的配置会覆盖 &lt;code&gt;/etc/gitconfig&lt;/code&gt; 中的同名变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;配置用户信息&#34;&gt;配置用户信息&lt;/h1&gt;
&lt;p&gt;配置个人的用户名称和电子邮件地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userName&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userEmail&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果使用 &lt;code&gt;--global&lt;/code&gt; 选项，那么就会更改用户主目录下的配置文件，以后所有的项目都会默认使用这里配置的用户信息。
如果要在某个特定的项目中使用其他名字或者邮箱，只要去掉 &lt;code&gt;--global&lt;/code&gt; 选项重新配置即可，新的设定保存在当前项目的 &lt;code&gt;.git/config&lt;/code&gt; 文件里。&lt;/p&gt;
&lt;h1 id=&#34;查看配置信息&#34;&gt;查看配置信息&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;git config --list&lt;/code&gt; 命令可以查看当前用户的个人配置信息，若看到重复变量名，则说明它们位于不同的配置文件中。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
